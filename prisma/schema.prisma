generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
  // directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id       String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email    String
  password String
  role     String
}

model Attachment {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  url       String
  position  Int
  cardId    String   @db.Uuid
  createdAt DateTime @default(now())
  card      Card     @relation(fields: [cardId], references: [id])
}

model Board {
  id        String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  orderId   Int         @default(autoincrement())
  name      String      @unique
  protected Boolean     @default(false)
  createdAt DateTime    @default(now())
  cards     Card[]
  statuses  Status[]
  tags      Tag[]
  TagLinker TagLinker[]
}

model Card {
  id                String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title             String
  description       String?
  boardId           String             @db.Uuid
  attachments       Attachment[]
  board             Board              @relation(fields: [boardId], references: [id])
  status            Status             @relation(fields: [statusId], references: [id])
  tags              TagLinker[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @default(now())
  statusId          String             @db.Uuid
  CardStatusHistory CardStatusHistory?
}

model Status {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  color     String
  createdAt DateTime @default(now())
  position  Int
  boardId   String   @db.Uuid
  boards    Board    @relation(fields: [boardId], references: [id])
  cards     Card[]
}

model CardStatusHistory {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  cardId    String   @unique @db.Uuid
  cardTitle String
  statusId  String   @db.Uuid
  moveDate  DateTime
  card      Card     @relation(fields: [cardId], references: [id])
}

model Tag {
  id         String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String
  color      String
  fontColor  String
  boardId    String      @db.Uuid
  createdAt  DateTime    @default(now())
  board      Board       @relation(fields: [boardId], references: [id])
  tagLinkers TagLinker[]
}

model TagLinker {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now())
  boardId   String   @db.Uuid
  cardId    String   @db.Uuid
  tagId     String   @db.Uuid
  card      Card     @relation(fields: [cardId], references: [id])
  board     Board    @relation(fields: [boardId], references: [id])
  tag       Tag      @relation(fields: [tagId], references: [id])
}
